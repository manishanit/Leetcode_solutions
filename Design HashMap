# 1st approach -> linear search

class MyHashMap {
public:
    /** Initialize your data structure here. */
    vector<pair<int,int>> map;
    MyHashMap() {
        map={};
    }
    
    /** value will always be non-negative. */
    void put(int key, int value) {
        for(int i=0;i<map.size();i++)
        {
            if(map[i].first==key)
            {
                map[i].second=value;
                return;
            }
        }
        map.push_back(make_pair(key,value));
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key) {
        for(int i=0;i<map.size();i++)
        {
            if(map[i].first==key)
                return map[i].second;
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) {
        int flag=0;
        int i;
        for(i=0;i<map.size();i++)
        {
            if(map[i].first==key)
            {
                flag=1;
                break;
            }
        }
        if(flag==0)
            return;
        for(int j=i;j<map.size()-1;j++)
            map[j]=map[j+1];
        map.resize(map.size()-1);
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
 
 
 
 #Approach 2
 
 #include <bits/stdc++.h>
#include <limits.h>

using namespace std;

class MyHashMap {
public:
    vector<set<pair<int, int> > > mmap;
    int vsize = 997;

    MyHashMap() {
        mmap = vector<set<pair<int, int> > >(vsize);
    }
	
    void put(int key, int value) {
        auto upper = mmap[key%vsize].upper_bound(make_pair(key, INT_MIN));
        if ( !(upper == mmap[key%vsize].end() || upper->first != key) )
            remove(key);
        else
            mmap[key%vsize].insert(make_pair(key, value));
    }

    int get(int key) {
        auto upper = mmap[key%vsize].upper_bound(make_pair(key, INT_MIN));
        if ( upper == mmap[key%vsize].end() || upper->first != key )
            return -1;
        return upper->second;
    }
    
    void remove(int key) {
        auto upper = mmap[key%vsize].upper_bound(make_pair(key, INT_MIN));
        if ( upper == mmap[key%vsize].end() || upper->first != key )
            return;
        mmap[key%vsize].erase(upper);
    }
};
/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
