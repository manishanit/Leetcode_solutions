/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root,vector<int>& arr)
    {
        if(root!=NULL)
        {
            if(root->left!=NULL)
                inorder(root->left,arr);
            arr.push_back(root->val);
            if(root->right!=NULL)
                inorder(root->right,arr);
        }
    }
    bool isValidBST(TreeNode* root) {
        vector<int> arr={};
        inorder(root,arr);
        if(root==NULL)
            return true;
        for(int i=0;i<arr.size()-1;i++)
        {
            if(arr[i]>=arr[i+1])
                return false;
        }
        return true;
    }
};

/*without using an extra array*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode* root,TreeNode* low,TreeNode* high)
    {
        if(root==NULL)
            return true;
        if(low!=NULL && root->val<=low->val) 
            return false;
        if(high!=NULL && root->val>=high->val)
            return false;
        return helper(root->left,low,root)&&
            helper(root->right,root,high);
    }
    bool isValidBST(TreeNode* root) {
         return helper(root,NULL,NULL);
    }
};
