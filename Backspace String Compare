class Solution {
public:
    bool backspaceCompare(string S, string T) {
        stack<char> s1;
        stack<char> s2;
        for(int i=0;i<S.length();i++)
        {
            if(S[i]>='a' && S[i]<='z')
                s1.push(S[i]);
            else
                if(!s1.empty())
                    s1.pop();
        }
        for(int i=0;i<T.length();i++)
        {
            if(T[i]>='a' && T[i]<='z')
                s2.push(T[i]);
            else
                if(!s2.empty())
                    s2.pop();
        }
        while(!s1.empty() && !s2.empty())
        {
            if(s1.top()!=s2.top())
                return false;
            s1.pop();
            s2.pop();
        }
        if((!s1.empty() && s2.empty())||(!s2.empty() && s1.empty()))
            return false;
        return true;
    }
};

#solution 2

class Solution {
public:
    bool backspaceCompare(string S, string T) {
        int i=S.length()-1;
        int j=T.length()-1;
        int skipS=0,skipT=0;
        
        while(i>=0 || j>=0)
        {
            while(i>=0)
            {
                if(S[i]=='#')
                {
                    skipS++;
                    i--;
                }
                else if(skipS>0)
                {
                    skipS--;
                    i--;
                }
                else
                    break;
            }
            while(j>=0)
            {
                if(T[j]=='#')
                {
                    skipT++;
                    j--;
                }
                else if(skipT>0)
                {
                    skipT--;
                    j--;
                }
                else
                    break;
            }
            if(i>=0 && j>=0 && S[i]!=T[j])
                return false;
            if((i>=0)!=(j>=0))
                return false;
            i--;
            j--;
        }
        return true;
    }
};
