class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int size=nums.size();
        return (max((nums[size-1]*nums[size-2]*nums[size-3]),
                   (nums[0]*nums[1]*nums[size-1])));
    }
};

/* in O(N)*/

class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int min1=INT_MAX;
        int min2=INT_MAX;
        int max1=INT_MIN;
        int max2=INT_MIN;
        int max3=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            if(min1==INT_MAX || nums[i]<min1)
            {
                if(min1!=INT_MAX)
                    min2=min1;
                    min1=nums[i];
            }
            else if(min2==INT_MAX || min2>nums[i])
                min2=nums[i];
            if(max1==INT_MIN || nums[i]>max1)
            {
                if(max1!=INT_MIN)
                {
                    if(max2!=INT_MIN)
                    {
                        max3=max2;
                        max2=max1;
                    }
                    else
                        max2=max1;
                }
                max1=nums[i];
            }
            else if(max2==INT_MIN || nums[i]>max2)
            {
                if(max2!=INT_MIN)
                    max3=max2;
                max2=nums[i];
            }
            else if(max3==INT_MIN || nums[i]>max3)
                max3=nums[i];
        }
        return max(max1*max2*max3,min1*min2*max1);
    }
};
