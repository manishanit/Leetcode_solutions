/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    unordered_map<int,int> map;
public:
   void inorder(TreeNode* root)
   {
       if(root==NULL)
           return;
       if(root->left!=NULL)
          inorder(root->left);
       if(map.find(root->val)!=map.end())
           map[root->val]++;
       else
           map.insert(make_pair(root->val,1));
       if(root->right!=NULL)
           inorder(root->right);
   }
    vector<int> findMode(TreeNode* root) {
        inorder(root);
        int max_freq=INT_MIN;
        for(auto itr: map)
        {
            if(itr.second>max_freq)
                max_freq=itr.second;
        }
        vector<int> result;
        for(auto itr:map)
        {
            if(itr.second==max_freq)
                result.push_back(itr.first);
        }
        return result;
    }
};

#approach 2


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
   
public:
   void inorder(TreeNode* root,int&count,int &max_freq,int &prev,vector<int> &result)
   {
       if(root==NULL)
           return;
       
       inorder(root->left,count,max_freq,prev,result);
       if(root->val==prev)
           count++;
       else
           count=1;
       if(max_freq<count)
       {
           max_freq=count;
           result.clear();
           result.push_back(root->val);
       }
       else if(max_freq==count)
           result.push_back(root->val);
       prev=root->val;
       inorder(root->right,count,max_freq,prev,result);
   }
    vector<int> findMode(TreeNode* root) {
        int count=0;
        int max_freq=INT_MIN;
        int prev=INT_MIN;
        vector<int> result;
        inorder(root,count,max_freq,prev,result);
        return result;
    }
};
