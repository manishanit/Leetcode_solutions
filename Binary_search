class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start=0;
        int end=nums.size()-1;
        while(start<=end)
        {
            int mid=(start+end)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>target)
                end=mid-1;
            else
                start=mid+1;
        }
        return -1;
    }
};

#recursive

class Solution {
public:
    int helper(vector<int>& nums,int start,int end,int target)
    {
        if(start>end)
            return -1;
        int mid=(start+end)/2;
        if(nums[mid]==target)
            return mid;
        else if(nums[mid]>target)
            return helper(nums,start,mid-1,target);
        else
            return helper(nums,mid+1,end,target);
    }
    int search(vector<int>& nums, int target) {
        int index=helper(nums,0,nums.size()-1,target);
        return index;
    }
};
