Approach 1

class Solution {
public:
    int findJudge(int N, vector<vector<int>>& trust) {
        int i;
        vector<vector<int>> result(N,vector<int>(N));
        for(i=0;i<N;i++)
        {
            for(int j=0;j<N;j++)
            {
                result[i][j]=0;
            }
        }
        for(i=0;i<trust.size();i++)
            result[trust[i][0]-1][trust[i][1]-1]=1;
        
       int position=-1;
       for(i=0;i<N;i++)
        {
            int flag=0;
            for(int j=0;j<N;j++)
            {
                if(result[i][j]==1)
                {
                    flag=1;
                    break;
                }
            }
            if(flag==0)
            {
                position=i;
                break;
            }
        }
        if(position==-1)
            return -1;
        
        int flag=0;
        for(int j=0;j<N;j++)
        {
          if(j!=position && result[j][position]==0)
          {
            flag=1;
            break;
          }
        }
        if(flag==1)
            return -1;
        return (position+1);
    }
};

Approach 2
class Solution {
public:
    int findJudge(int N, vector<vector<int>>& trust) {
        vector<int> indegree(N+1,0);
        vector<int> outdegree(N+1,0);
        for(auto e:trust)
        {
            indegree[e[1]]++;
            outdegree[e[0]]++;
        }
        for(int i=1;i<=N;i++)
        {
            if(indegree[i]==(N-1) && outdegree[i]==0)
                return i;
        }
        return -1;
    }
};

