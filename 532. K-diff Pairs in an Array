#approach 1

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        unordered_map<int,int> map;
        vector<vector<int>> result;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++)
        {
            if(map.find(nums[i]-k)!=map.end())
            {
                vector<int> temp(2);
                temp[0]=nums[i];
                temp[1]=nums[i]-k;
                result.push_back(temp);
            }
            if(map.find(nums[i])!=map.end())
                map.insert(make_pair(nums[i],1));
            else
                map[nums[i]]++;
        }
        sort(result.begin(),result.end());
        result.erase(unique(result.begin(),result.end()),result.end());
        return result.size();
    }
};

#approach 2
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
       int n=nums.size();
        if(k<0 || n<=1)
            return 0;
        sort(nums.begin(),nums.end());
        int left=0;
        int right=1;
        int count=0;
        while(right<n)
        {
            if(nums[right]-nums[left]==k)
            {
                count++;
                right++;
                left++;
                while(right<n && nums[right]==nums[right-1])
                    right++;
                while(left<n && nums[left]==nums[left-1])
                    left++;
            }
            else if(nums[right]-nums[left]>k)
                left++;
            else if(nums[right]-nums[left]<k)
                right++;
            if(left==right)
                right++;
        }
        
        return count;
    }
};

