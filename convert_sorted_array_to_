/*
This got accepted in leetcode with following:
Runtime: 20 ms, faster than 58.18% of C++ online submissions for Convert Sorted Array to Binary Search Tree.
Memory Usage: 21 MB, less than 97.30% of C++ online submissions for Convert Sorted Array to Binary Search Tree.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* newNode(int x)
    {
        TreeNode* ptr=new TreeNode(0);
        ptr->val=x;
        ptr->left=NULL;
        ptr->right=NULL;
        return ptr;
    }
    TreeNode* sortedArray(vector<int>& nums,int start,int end)
    {
        if(start>end)
            return NULL;
        int mid=(start+end)/2;
        TreeNode* root=newNode(nums[mid]);
        root->left=sortedArray(nums,start,mid-1);
        root->right=sortedArray(nums,mid+1,end);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
          return sortedArray(nums,0,nums.size()-1);
        
    }
};
