/*this uses kadane's algorithm where we iterate through the array and keep two sums
1) max_ending_here
2) max_sum_so_far

We keep on adding elements in the max_ending_here, and update the max_sum_so_far with it if
it is greater, such that if max_ending_here<0 then we make it 0
*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
      int max_ending_here=0;
      int max_so_far=INT_MIN;
      for(int i=0;i<nums.size();i++)
      {
          max_ending_here+=nums[i];
          if(max_so_far<max_ending_here)
              max_so_far=max_ending_here;
          if(max_ending_here<0)
              max_ending_here=0;
      }
        return max_so_far;
    }
};

/*The below approach is for divide and conquer*/
class Solution {
public:
    int max1(int a,int b,int c)
    {
        return max(a,max(b,c));
    }
    int maxCrossingSum(vector<int>& nums,int low,int mid,int high)
    {
        int leftSum=INT_MIN;
        int sum=0;
        for(int i=mid;i>=low;i--)
        {
            sum+=nums[i];
            if(sum>leftSum)
               leftSum=sum;
        }
        sum=0;
        int rightSum=INT_MIN;
        for(int i=mid+1;i<=high;i++)
        {
            sum+=nums[i];
            if(sum>rightSum)
                rightSum=sum;
        }
        return (leftSum+rightSum);
    }
    int maxSum(vector<int>& nums,int low,int high)
    {
        if(low==high)
            return nums[low];
        int mid=(low+high)/2;
        return max1(maxSum(nums,low,mid),
                   maxSum(nums,mid+1,high),
                   maxCrossingSum(nums,low,mid,high));
        
    }
    int maxSubArray(vector<int>& nums) {
    return maxSum(nums,0,nums.size()-1);
    }
};
